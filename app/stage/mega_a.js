const Scene = require('telegraf/scenes/base')
const scene = new Scene('mega_a')

const { Channel } = require('../module')
const { keyboard, inlineKeyboard, callbackButton } = require('telegraf/markup')

scene.enter(ctx => {
    ctx.reply('–ú–µ–Ω—é', keyboard([
        ['–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª', '–õ–∏—Å—Ç –∫–∞–Ω–∞–ª–æ–≤'],
        ['–ù–∞ –≥–ª–∞–≤–Ω—É—é']
    ]).oneTime().resize().extra())
})

scene.hears('–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª', ctx => ctx.scene.enter('add_channel'))
scene.hears('–õ–∏—Å—Ç –∫–∞–Ω–∞–ª–æ–≤', async ctx => {
    let channel = await Channel.find({ Creator: ctx.from.id })
    if(channel){
        ctx.reply(ctx.message.text, keyboard(channel.map(c => c.NameChannel)).oneTime().resize().extra())
        setTimeout(() => { 
            ctx.reply('–ù–∞–∑–∞–¥?', inlineKeyboard([ callbackButton('<- –ù–∞–∑–∞–¥', 'back') ]).extra())
        }, 500)
    }else{
        ctx.reply('–£ —Ç–µ–±—è –Ω–µ—Ç—É –∫–∞–Ω–∞–ª–æ–≤', keyboard(['–ù–∞ –≥–ª–∞–≤–Ω—É—é']).oneTime().resize().extra())
    }
})

scene.on('text', async (ctx, next) => {
    let channel = await Channel.find({ Creator: ctx.from.id })
    let channels = channel.find(c => c.NameChannel === ctx.message.text)
    if(channels){
        ctx.session.counter = channels._id
        ctx.reply(ctx.message.text,
        keyboard([
            ['–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'],
            ['–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥'],
            ['–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª'],
            ['< –ù–∞–∑–∞–¥']
        ]).oneTime().resize().extra())
    } next()
})

scene.hears('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', async ctx => {
    let channel = await Channel.findById(ctx.session.counter)
    channel ? ctx.scene.enter('edit_name') : ctx.reply('–£–ø—Å, –Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç–≤—É–µ—Ç –∫–∞–Ω–∞–ª!', keyboard(['< –ù–∞–∑–∞–¥']).oneTime().resize().extra())
})

scene.hears('–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥', async ctx => {
    let channel = await Channel.findById(ctx.session.counter)
    if(channel.Status === `Run`){
        ctx.reply(`‚úÖ –ê–≤—Ç–æ–ø–æ—Å—Ç –≤–∫–ª—é—á–µ–Ω!`,
        inlineKeyboard([ callbackButton('üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç', 'auto-off') ]).extra())
    }else{
        ctx.reply(`üî¥ –ê–≤—Ç–æ–ø–æ—Å—Ç –æ—Ç–∫–ª—é—á–µ–Ω!`,
        inlineKeyboard([ callbackButton('‚úÖ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç', 'auto-on') ]).extra())
    }
})

scene.action('auto-off', async ctx => {
    let channel = await Channel.findById(ctx.session.counter)
    channel.Status = `Cansel`
    channel.save().catch(err => console.log(err))

    ctx.editMessageText(`üî¥ –ê–≤—Ç–æ–ø–æ—Å—Ç –æ—Ç–∫–ª—é—á–µ–Ω!`,
    inlineKeyboard([
        [callbackButton('‚úÖ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç', 'auto-on')],
        [callbackButton('<- –ù–∞–∑–∞–¥', 'back')]
    ]).extra())
})
scene.action('auto-on', async ctx => {
    let channel = await Channel.findById(ctx.session.counter)
    channel.Status = `Run`
    channel.save().catch(err => console.log(err))

    ctx.editMessageText(`‚úÖ –ê–≤—Ç–æ–ø–æ—Å—Ç –≤–∫–ª—é—á–µ–Ω!`,
    inlineKeyboard([
        [callbackButton('üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç', 'auto-off')],
        [callbackButton('<- –ù–∞–∑–∞–¥', 'back')]
    ]).extra())
})

scene.hears('–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª', async ctx => {
    let channel = await Channel.findById(ctx.session.counter)
    await Channel.remove({ _id: ctx.session.counter })
    ctx.reply(`–ö–∞–Ω–∞–ª: ${channel.NameChannel} —É–¥–∞–ª–µ–Ω!`,
    inlineKeyboard([
        callbackButton('<- –ù–∞–∑–∞–¥', 'back')
    ]).extra())
})

scene.action('back', ctx => {
    ctx.deleteMessage()
    ctx.reply('–ú–µ–Ω—é', keyboard([
        ['–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª', '–õ–∏—Å—Ç –∫–∞–Ω–∞–ª–æ–≤'],
        ['–ù–∞ –≥–ª–∞–≤–Ω—É—é']
    ]).oneTime().resize().extra())
})

scene.action('< –ù–∞–∑–∞–¥', ctx => {
    ctx.reply('–ú–µ–Ω—é', keyboard([
        ['–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª', '–õ–∏—Å—Ç –∫–∞–Ω–∞–ª–æ–≤'],
        ['–ù–∞ –≥–ª–∞–≤–Ω—É—é']
    ]).oneTime().resize().extra())
})

module.exports = scene